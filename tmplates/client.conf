#yuxtapa client configuration file

#Empty lines and lines starting with a '#' are ignored.

# Set your nick (the name by which you will be known when you're playing).
# Replace 'Anonymous' below with anything you like; spaces and unicode are
# allowed, but maximum length is 10 symbols.
#
# nick [nickname]
nick Anonymous

# Set your servers. Give each server a name by which you best know it.
# For instance, if you have defined "server ABC 123.123.123.123:20000",
# then running the client with "yuxtapa_cl ABC" will connect to the
# address 123.123.123.123:20000.
#
# You can store as many servers as you like. It is also possible to give
# the address directly as a command line argument, e.g.:
# "yuxtapa_cl 60.70.80.90:12358". If no command line argument is
# given, the client connects to the first address in the config, and if
# there are no addresses in the config, it will try to connect to
# localhost, port 12360.
#
# You can use IPv6, too, e.g. [1234:1a2b::1234:2c3d]:12360
#
#server [short name] [IP+port]
server local 127.0.0.1:12360

# Send mode.
# There are two ways the client can deliver your actions to the server. The
# default is the "traditional way", the only way prior to yuxtapa version 8. If
# you set the below 'actperturn' to 1, the new send mode is used, which sends
# only one action per turn, thus throttling the acting in the client end, rather
# than the server's.
#
# Advantages of 'actperturn 1': you can hold down movement keys and the
# experience is more natural (your PC will actually stop moving when you release
# the key).
# Disadvantages of 'actperturn 1': if you miss out on a server update, you will
# also not get to act on that turn.
# In conclusion, 'actperturn 1' can be very much more comfortable if your
# connection is reliable and fast.
#
# You can toggle the mode ingame with the '%' key binding. The setting here is
# just the default that is set initially. You will probably want to turn it off
# when spectating or when using the Planewalker ability, as otherwise it will
# hinder your movement unnecessarily.
#
#actperturn ['1' or '0' for on/off]
actperturn 0

# Set an update animation. This animation is run to signal received
# updates from the server, and thus to indicate a healthy connection.
# It also helps you grasp the pace of the turns.
#
# The animation has to be 2-15 symbols in length. Unicode and spaces
# are allowed.
#
# Examples:
#anim .oOo
#anim -\|/
#anim v<v>
#anim pbdq
#anim +x
#anim sS$S
#anim `'
#anim Ã°dcd
#
#anim [the animation "frames" or characters]
anim -\|/

# Key remapping.
# You can remap any of the keys of the "normal game state". For instance,
# to remap the quit key 'Q' to a lowercase 'q' you set:
#key Qq
# Note that there is no space between the old and the new key. To remap the
# space bar to, eg., 'v', you define:
#key  v
# (Note how there are two spaces after 'key'.)
#
# Conflicts (two functions mapped to the same key) are not tolerated, and
# if any appear, the client reverts back to the default keys.
#
# It is possible to use keybindings CTRL+[a letter key], as well. To do so,
# simply replace the key by "^?", where '?' is the letter, eg.
#key Q^q
# would remap the quit key to CTRL+Q, ^Q. Upper or lower case makes no
# difference with the CTRL-keys.
#
# Using the system signallers ^Z, ^C, and ^D might be a bad idea. They are
# accepted, though.
#
# You can only remap to basic ASCII keys and CTRL+[letter]. Function keys F1
# through F12, arrow keys, or Alt/Shift modified keys are not available.
# Moreover, the questionmark, '?', is reserved for the help function.
#
# The default keys are:
# 2   down/south
# 8   up/north
# 4   left/west
# 6   right/east
# 1   down-left/SW
# 3   down-right/SE
# 7   up-left/NW
# 9   up-right/NE
# 5   stop, or target self
#     (space) follow next player, or use class ability
# p   follow previous player
# 	  (tab) say something in the chat
# s   shout something aloud
# c   close a door
# X   suicide
# T   intentionally trigger a trap
# u   light/extinguish your torch
# w   toggle walk mode
# t   toggle titles
# d   print all titles to chat
# i   show team information
# o   toggle reacting to damage
# %   toggle send mode
# +   scroll the chat down
# -   scroll the chat up
# l   go to the limbo menu
# Q   quit; disconnect and end the client program
#
# You can just uncomment the following to use Vi-keys for movement
# ('l' and 'u' must be remapped, too):
#key 2j
#key 8k
#key 4h
#key 6l
#key 1b
#key 3n
#key 7y
#key 9u
#key 5.
#key l^l
#key u^u
#
#key [default key][new key]

# Message aliasing.
# To define abbreviations or rename server commands. For instance:
#alias +b !spawnbots 1
# would result in the message "+b" being expanded into "!spawnbots 1".
# Note that finding the keyword as a substring causes a replacement, too.
# If you define
#alias sk spawnkilling!
# and then say "you don't have any skill", you end up saying "you don't
# have any spawnkilling!ill". Best to make the keyword contain some special
# characters you'd never use in that way by accident.
#
# Multiple expansions in the same message are not possible! Only the first
# matching alias is applied.
#
#alias [word] [string to expand 'word' to]

# Number of stored messages.
# The client can save a number of the most recent messages into a file
# so you can reuse them the next time (by hitting the up arrow in chat mode).
#
#stored_chat_msgs [number, 0--1000, default 100]
stored_chat_msgs 100

# Ouch message.
# This defines a shout that is automatically generated whenever your PC is
# damaged (the same as if you hit 's' and typed the message). To disable
# this features altogether, simply do not define 'ouch'.
#
# The maximum length for the string is 53 symbols (utf-8).
#
# Another option, 'ouch_on' defines whether using this feature is initially
# enabled or not. You can toggle it ingame with the 'o' key. Default is 0.
# This has no significance if no ouch strich is defined.
#
#ouch [message string]
#ouch_on ['1' or '0' for yes/no]
ouch ow!
ouch_on 0

# Quick shouts.
# You can attach to each function key F1--F12 a message that gets shouted
# immediately upon the corresponding key press. Like the "ouch" message,
# these strings can be at most 53 symbols long. Some examples are
# provided:
#
#qshout [function key number] [message]
qshout 1 Follow me!
qshout 2 I need healing!
qshout 3 Sorry!
qshout 4 Oops!
qshout 5 Thank thee!
qshout 6 Move!
qshout 7 I need a light!
qshout 8 Dig a passage!
#qshout 9 ...
#qshout 10 ...
#qshout 11 ...
#qshout 12 ...

